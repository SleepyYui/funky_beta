#!/usr/bin/env fkyrun

  Copyright (C) 2023 by Laurin Girrer

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

<require basic/stdlib>
<require terminal/terminal>

print! "@esc;[?47h" # switch to alternate screen
get_terminal_attributes! STDIN_FILENO $original_attributes
$attributes original_attributes
use_canonical_mode &attributes false #  no line-buffering ...
echo_characters &attributes false # ... and no echoing of typed in characters
get_terminal_size! STDIN_FILENO $terminal_width $terminal_height
set_terminal_attributes! $_success STDIN_FILENO attributes
cursor_off! # we want no blinking cursor
create_terminal $terminal terminal_width terminal_height TEXT_COLOUR=WHITE BACKGROUND_COLOUR=BLACK

clear_screen!

$center_x terminal_width .div. 2
$center_y terminal_height

$get_boundry:
  (
    points
  )
  $xmin points(1)(1)
  $ymin points(1)(2)
  $xmax points(2)(1)
  $ymax points(2)(2)
  for_each points !xmin !ymin !xmax !ymax
    : (xy)
      cond !xmin !xmax
	-> xy(1) < xmin -> xy(1) xmax
	-> xy(1) > xmax -> xmin xy(1)
	-> true -> xmin xmax
      cond !ymin !ymax
	-> xy(2) < ymin -> xy(2) ymax
	-> xy(2) > ymax -> ymin xy(2)
	-> true -> ymin ymax
      next
    -> xmin ymin xmax ymax
  -> xmin ymin xmax ymax

$get_lines:
  (
    points
    y
  )
  $lines list()
  from_to 1 length_of(points) !lines
    : (idx)
      $idx2 mod(idx+1 length_of(points))+1
      $y1 points(idx)(2)
      $y2 points(idx2)(2)
      if !y1 !y2
	y1 < y2
	-> y2 y1
	-> y1 y2
      if !lines
	y < y1 && y2 <= y:
	  append &lines list(list(points(idx) points(idx2)))
	  -> lines
	-> lines
      next
    -> lines
  -> lines

$get_slope:
  (
    lines
  )
  $dy lines(2)(2)-lines(1)(2) #difference of y2 & y1
  $dx lines(2)(1)-lines(1)(1) #difference of x2 & x1
  if
    dx != 0
    -> over(dy dx)
    -> 0

$get_y_intersection:
  (
    lines
    slopes
    y
  )
  $xses list()
  from_to 1 length_of(lines) !xses
    : (idx)
      $line lines(idx)
      $slope slopes(idx)
      if $x
	slope != 0
	-> over(y-line(1)(2) slope)
	-> 0
      plus &x line(1)(1)
      append &xses list(x)
      next
    -> xses
  -> xses

$draw_polygon: #draw polygons with list orderd by draw direction
  (
    terminal
    points
  )
  get_boundry points $xmin $ymin $xmax $ymax
  from_to ymin ymax !terminal
    : (y)
      get_lines points y $lines #returns xy-point pairs
      $slopes map(lines get_slope)
      get_y_intersection lines slopes y $draw_points #returns x pairs for horizontal line drawing
      sort &draw_points
      from_to 0 div(length_of(draw_points) 2)-1 !terminal
	: (idx)
	  $x1 to_integer(draw_points(idx*2+1))
	  $x2 to_integer(draw_points(idx*2+2))
	  if !terminal
	    x2-x1-1 != 0 && (x2 <= xmax && x1 >= xmin):
	      plot_line &terminal x1+1 y x2 y
	      -> terminal
	    :
	      plot &terminal x1+1 y
	      -> terminal
	  next
	-> terminal
      next
    -> terminal
  -> terminal

$polygon
  list
    list(90+center_x 0+center_y)
    list(45+center_x 100+center_y)
    list(-5+center_x 45+center_y)
    list(-60+center_x -5+center_y)
    list(-100+center_x -100+center_y)
    list(-40+center_x 40+center_y)
    list(0+center_x 10+center_y)

#dieses polygon ist sehr comisch
#$polygon
  list
    list(0+center_x -30+center_y)
    list(20+center_x 15+center_y)
    list(20+center_x -15+center_y)
    list(0+center_x 30+center_y)
    list(-20+center_x -15+center_y)
    list(-20+center_x 15+center_y)

#$polygon
  list
    list(0+center_x -30+center_y)
    list(20+center_x 15+center_y)
    list(-20+center_x 15+center_y)
    list(0+center_x 30+center_y)
    list(20+center_x -15+center_y)
    list(-20+center_x -15+center_y)

draw_polygon &terminal polygon
draw_boundry &terminal polygon

$draw_boundry:
  (
    terminal
    shape
  )
  set_text_colour &terminal BLUE
  from_to 1 length_of(shape) !terminal
    : (idx)
      $idx2 mod(idx+1 length_of(shape))+1
      $xy1 shape(idx)
      $xy2 shape(idx2)
      #edump `"@(xy1(1)) @(xy1(2))"
      #edump `"@(xy2(1)) @(xy2(2))"
      plot_line &terminal xy1(1) xy1(2) xy2(1) xy2(2)
      next
    -> terminal
  -> terminal

update_terminal &terminal $output
clear_screen!
print! output

use_canonical_mode &attributes true
echo_characters &attributes true
set_terminal_attributes! $_success STDIN_FILENO attributes
cursor_on!
