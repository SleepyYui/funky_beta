#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or print to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Input-Output Events

  Events are the Funky way to handle multiple input/output streams in a
  parallel way.

  The event system is based on the concept of an event "loop". The event "loop"
  is part of the application program.

  Before entering the event loop, the application program must create an
  input-output object and register all input-output streams that should be
  handled by the event loop.

  To create an input-output object, simply clone the object <std_types::io>.

  The event loop then waits for an event to occur. When an event occurs, the
  event loop calls the event handler function associated with the event.

  The event handler function can then process the event and return to the
  event loop.

  The event loop continues to wait for the next event.

  Possible events can be registered or unregistered at any time.

  To register an event call

  <start_reading_from> - for reading from a stream

  <start_catching_signals> - for catching signals like SIGINT

  <start_injecting_window_change_events> - for catching window change events

  To unregister an event call

  <stop_reading_from> - to stop reading from a stream

  <stop_catching_signals> - to stop catching signals

  <stop_injecting_window_change_events> - to stop injecting window change events

  In the event loop call

  <get_events> - to get one or more events

  Actual input operations are performed by <get_events>. Write operations are
  initiated by the application program and performed by <get_events>.

  See also: @Input-Output, @Input-Output Task Manager

  Example:

    $io std_types::io # create an input-output object
    start_reading_from &io STDIN_FILENO # register reading from STDIN
    write &io STDOUT_FILENO "Please enter some text:@nl;"
      # write a prompt text to STDOUT
    $input_buffer "" # create an initially empty input buffer

    loop: # the event loop
      get_events! &io $events # get one or more events
      for_each events # handle all received events
	: (event)
	  event $type $fd $argument # destructure the event
	  case type # check the event type
	    READ: # event is a read event
	      case fd # check the file descriptor
		STDIN_FILENO: # it was a read event from STDIN
		  append &input_buffer argument
		    # append the received data to the input buffer
		  handle_input !io &input_buffer # call the input handler
		  if
		    io.is_undefined:
		      #
			the input handler returned undefined to indicate
			that the input processing is finished
		      terminate! # terminate the program
		    next # otherwise continue processing the events
		next # ignore read events for other file descriptors
	    READ_FAILED: # event is a read error
	      Error! "Error reading from standard input!"
	    WRITE_PENDING: # event is a write pending event
	      # ignore
	      next! # continue processing the events
	    WRITE_COMPLETED: # event is a write completed event
	      # ignore
	      next! # continue processing the events
	    next # ignore all other events
	next # check for more events

    $handle_input: (buffer)
      loop:
	if
	  buffer .contains. '@nl;':
	    # the input buffer contains at least one complete line
	    $line buffer .before. '@nl;' # extract the line
	    if
	      line == "quit" # the user entered "quit"
	      -> undefined undefined
		#
		  return undefined to indicate that the input processing is
		  finished
	      : # Output the line
		write &io STDOUT_FILENO "
		  You entered: "@(line)"
		behind &buffer '@nl;'
		  # remove the processed line from the input buffer
		next # continue processing the buffer
	  -> io buffer
	    # return the (maybe) modified input-output object and buffer

$std::READ .
  #
    used to tag "read" events

    Topic: Input-Output Events

    See also: CONNECT, CLOSED, READ_FAILED, WRITE_PENDING, WRITE_COMPLETED,
	      WRITE_FAILED, PROCESS_JOINED, SIGNAL

$std::CLOSED .
  #
    used to tag "closed" events

    Topic: Input-Output Events

    See also: READ, READ_FAILED

$std::READ_FAILED .
  #
    used to tag "read error" events

    Topic: Input-Output Events

    See also: READ, CLOSED, CONNECT, WRITE_PENDING, WRITE_COMPLETED,
	      WRITE_FAILED, PROCESS_JOINED, SIGNAL

$std::CONNECT .
  #
    used to tag "connected" socket events

    Topic: Input-Output Events

    See also: READ, READ_FAILED, WRITE_PENDING, WRITE_COMPLETED,
	      WRITE_FAILED, PROCESS_JOINED, SIGNAL

$std::WRITE_PENDING .
  #
    used to tag "write pending" events

    Topic: Input-Output Events

    See also: READ, CONNECT, READ_FAILED, WRITE_COMPLETED,
	      WRITE_FAILED, PROCESS_JOINED, SIGNAL

$std::WRITE_COMPLETED .
  #
    used to tag "write completed" events

    Topic: Input-Output Events

    See also: READ, CONNECT, READ_FAILED, WRITE_PENDING,
	      WRITE_FAILED, PROCESS_JOINED, SIGNAL

$std::WRITE_FAILED .
  #
    used to tag "write error" events

    Topic: Input-Output Events

    See also: READ, CONNECT, READ_FAILED, WRITE_PENDING,
	      WRITE_COMPLETED, PROCESS_JOINED, SIGNAL

$std::PROCESS_JOINED .
  #
    used to tag "process joined" events

    Topic: Input-Output Events

    See also: READ, CONNECT, READ_FAILED, WRITE_PENDING,
	      WRITE_COMPLETED, WRITE_FAILED, SIGNAL

$std::SIGNAL .
  #
    used to tag "signal" events

    Topic: Input-Output Events

    See also: READ, CONNECT, READ_FAILED, WRITE_PENDING,
	      WRITE_COMPLETED, WRITE_FAILED, PROCESS_JOINED

$std::JOB_COMPLETED .
  #
    used to tag "job completed" events

    Topic: Input-Output Events

    See also: JOB_FAILED

$std::JOB_FAILED .
  #
    used to tag "job failed" events

    Topic: Input-Output Events

    See also: JOB_COMPLETED

$std::initialize ()

$std::get_events ()
  #
    gets one or more events

    Result:

      events # a list of events

    Each event is a tuple with the following components:

    *  type - the event type

    *  fd - the file descriptor associated with the event

    *  argument - an argument associated with the event

    This function needs I/O-access rights.

    For a detailed example see <@Input-Output Events>.

    Topic: Input-Output Events

    See also: READ, READ_FAILED, WRITE_PENDING, WRITE_COMPLETED,
	      WRITE_FAILED, PROCESS_JOINED, SIGNAL

$std::start_reading_from ()
  #
    registers a read request for a file descriptor

    Parameters:
      io # an input-output object
      fd # the file descriptor of the stream

    For a detailed example see <@Input-Output Events>.

    Topic: Input-Output Events

    See also: stop_reading_from, get_events

$std::stop_reading_from ()
  #
    unregisters a read request for a file descriptor

    Parameters:
      io # an input-output object
      fd # the file descriptor of the stream

    For a detailed example see <@Input-Output Events>.

    Topic: Input-Output Events

    See also: start_reading_from, get_events

$std::cancel_write ()
  #
    cancels a write operation

    Parameters:
      io # an input-output object
      fd # the file descriptor of the stream

    For a detailed example see <@Input-Output Events>.

    Topic: Input-Output Events

    See also: write, get_events

$std::join_process ()
  #
    joins a process

    Parameters:
      io # an input-output object
      pid # the process ID

    Topic: Input-Output Events

    See also: get_events, PROCESS_JOINED

    Example:

      create_process! $pid $in_fd $out_fd $err_fd command arguments
      ...
      join_process &io pid
      ...
      loop:
	get_events! &io $events
	  for_each events
	    : (event)
	      event $type $epid $argument
	      case type
		PROCESS_JOINED:
		  if
		    pid == epid:
		      ...

$std::start_injecting_window_change_events ()
  #
    starts receiving window change events

    Parameters:
      io # an input-output object

    Topic: Input-Output Events

    See also: stop_injecting_window_change_events, get_events

$std::stop_injecting_window_change_events ()
  #
    stops receiving window change events

    Parameters:
      io # an input-output object

    Topic: Input-Output Events

    See also: start_injecting_window_change_events, get_events

$std::start_catching_signals ()
  #
    starts catching signals

    Parameters:
      io # an input-output object
      signals* # a list of signals to catch

    Topic: Input-Output Events

    See also: stop_catching_signals, get_events

$std::stop_catching_signals ()
  #
    stops catching signals

    Parameters:
      io # an input-output object
      signals* # the signals to stop catching

    Topic: Input-Output Events

    See also: start_catching_signals, get_events

$std::set_timeout ()
  #
    sets a timeout for getting events

    Parameters:
      io # an input-output object
      timeout # a timeout or point in time

    Topic: Input-Output Events

    See also: get_events

$std::enable_logging ()
  #
    enables logging

    Parameters:
      io # an input-output object
      level = 1 # the log level

    level:

    0: no logging (the same as <disable_logging>)
    1: minimum logging
    ...

    Topic: Input-Output Events

    See also: log, get_events

$std::disable_logging ()
  #
    disables logging

    Parameters:
      io # an input-output object

    Sets the log level to 0.

    Topic: Input-Output Events

    See also: log, get_events

$std::log ()
  #
    logs a message

    Parameters:
      io # an input-output object
      level = 1 # the log level
      message # the log message

    Topic: Input-Output Events

    See also: enable_logging, disable_logging, get_events

$std::register_handlers ()
  #
    registers an event handler function

    Parameters:
      io # an input-output object
      id # the id (file descriptor, job) associated with the event
      type_handlers* # the event handlers

    Topic: Input-Output Events

$std::deregister_handlers ()
  #
    deregisters an event handler function

    Parameters:
      io # the input-output object
      id # the id (file descriptor, job) associated with the event
      types* # the handler types to deregister

    Topic: Input-Output Events

$std::deregister_all_handlers ()
  #
    deregisters all event handler functions for the given id

    Parameters:
      io # the input-output object
      id # the id (file descriptor, job) associated with the event

    Topic: Input-Output Events

$std::register_resource ()
  #
    registers a resource

    Parameters:
      io # an input-output object
      key # the resource key
      resource # the resource

    Topic: Input-Output Events

$std::run ()
  #
    runs a job on the next call to <get_events>

    Parameters:
      io # an input-output object
      command # the command to execute
      arguments* # the arguments to the command

    Topic: Input-Output Events

$std::run_at ()
  #
    runs a job at a given point in time

    Parameters:
      io # an input-output object
      time # a point in time
      command # the command to execute
      arguments* # the arguments to the command

$std::finalize ()
  #
    finalizes some kind of resource

    Parameters:
      resource # the resource to finalize
      io # an input-output object

    Topic: Input-Output Events

$std::random_seed_of ()
  #
    sets or gets the random seed associated with an input-output object

    Topic: Input-Output Events

$std::step_no_of ()
  #
    gets the "step number" associated with an input-output object

    The "step number" is incremented after each call to <get_events>.

    Topic: Input-Output Events

$std::current_time_of ()
  #
    gets the current time associated with an input-output object

    Topic: Input-Output Events

$start_jobs_of ()
$timed_jobs_of ()
$read_jobs_of ()
$write_jobs_of ()
$close_jobs_of ()
$resources_of ()
$watched_pids_of ()
$exit_codes_of ()
$do_inject_window_change_events ()
$catched_signals_of ()
$window_change_event_occurred ()
$log_level_of ()
$exit_code_of ()
$timeout_of () # a <date_and_time> object not a number!
$handlers_of ()

$std_types::io std_types::object
  #
    the prototype for all input-output objects

    Topic: Input-Output Events

$std_types::io.read_jobs_of empty_hash_table
$std_types::io.write_jobs_of empty_hash_table
$std_types::io.close_jobs_of empty_hash_set
$std_types::io.start_jobs_of empty_list
$std_types::io.timed_jobs_of empty_list
$std_types::io.resources_of empty_insert_order_table
$std_types::io.watched_pids_of empty_hash_set
$std_types::io.exit_codes_of empty_hash_table
$std_types::io.do_inject_window_change_events false
$std_types::io.window_change_event_occurred false
$std_types::io.catched_signals_of empty_hash_set
$std_types::io.log_level_of 0
$std_types::io.exit_code_of undefined
$std_types::io.timeout_of undefined
$std_types::io.handlers_of empty_hash_table
$std_types::io.random_seed_of undefined
$std_types::io.step_no_of 0

$std::do_log_of ()

$std_types::resource std_types::object
$std_types::resource.name_of "anonymous resource"
$std_types::io.do_log_of false

$std_types::resource/enable_logging:
  #
    enables logging

    Topic: Input-Output Events

    See also: @Input-Output Events, disable_logging
  (
    self # the resource
  )
  -> self(.do_log_of true)

$std_types::resource/disable_logging:
  #
    disables logging

    Topic: Input-Output Events

    See also: @Input-Output Events, enable_logging
  (
    self # the resource
  )
  -> self(.do_log_of false)

$std_types::event tuple(undefined undefined undefined)
  #
    the prototype for all events

    Topic: Input-Output Events

$std_types::io/start_reading_from:
  #
    registers a read reqest for a file descriptor

    Topic: Input-Output Events

    See also: @Input-Output Events, stop_reading_from
  (
    self # the input-output object
    fd # the file descriptor of the stream
    do_close = true
    max_length = undefined
  )
  !self.read_jobs_of(fd) tuple(do_close max_length)
  -> self

$std_types::io/stop_reading_from:
  #
    unregisters a read request for a file descriptor

    Topic: Input-Output Events

    See also: @Input-Output Events, start_reading_from
  (
    self # the input-output object
    fd # the file descriptor of the stream
  )
  !self.read_jobs_of(fd) undefined
  -> self

$std_types::io/print_to:
  (
    self
    fd
    args*
  )
  write self fd create_string(args).to_utf8

$std_types::io/write:
  #
    writes data to a stream

    Topic: Input-Output Events

    See also: @Input-Output Events, cancel_write
  (
    self # the input-output object
    fd # the file descriptor of the stream
    data # the data to write
  )
  $job write_jobs_of(self)(fd)
  !job
    if
      job.is_defined
      -> append(job data)
      -> data
  !self.write_jobs_of(fd) job
  -> self

$std_types::io/cancel_write:
  #
    cancels a write operation

    Topic: Input-Output Events

    See also: @Input-Output Events, write
  (
    self # the input-output object
    fd # the file descriptor of the stream
  )
  $unwritten_text write_jobs_of(self)(fd)
  !self.write_jobs_of(fd) undefined
  -> self unwritten_text

$std_types::io/close:
  #
    closes a stream

    This also stops reading from the stream. If there are pending write
    operations, the close operation is delayed until all write operations
    have been completed.

    Topic: Input-Output Events

    See also: @Input-Output Events, stop_reading_from, cancel_write
  (
    self # the input-output object
    fd # the file descriptor of the stream to close
  )
  stop_reading_from &self fd
  !self.close_jobs_of(fd) true
  -> self

$std_types::io/join_process:
  #
    joins a process

    Topic: Input-Output Events

    See also: @Input-Output Events, get_events
  (
    self # the input-output object
    pid # the process ID
  )
  !self.watched_pids_of(pid) true
  -> self

$std_types::io/start_injecting_window_change_events:
  #
    starts receiving window change events

    Topic: Input-Output Events

    See also: @Input-Output Events, stop_injecting_window_change_events
  (
    self # the input-output object
  )
  -> self(.do_inject_window_change_events true)

$std_types::io/stop_injecting_window_change_events:
  #
    stops receiving window change events

    Topic: Input-Output Events

    See also: @Input-Output Events, start_injecting_window_change_events
  (
    self # the input-output object
  )
  -> self(.do_inject_window_change_events false)

$std_types::io/start_catching_signals:
  #
    starts catching signals

    Topic: Input-Output Events

    See also: @Input-Output Events, stop_catching_signals
  (
    self # the input-output object
    signals* # a list of signal names
  )
  $catched_signals catched_signals_of(self)
  for_each signals
    : (signal)
      !catched_signals(signal) true
      next
    -> self(.catched_signals_of catched_signals)

$std_types::io/stop_catching_signals:
  #
    stops catching signals

    Topic: Input-Output Events

    See also: @Input-Output Events, start_catching_signals
  (
    self # the input-output object
    signals* # a list of signal names
  )
  $catched_signals catched_signals_of(self)
  for_each signals
    : (signal)
      !catched_signals(signal) false
      next
    -> self(.catched_signals_of catched_signals)

$std_types::io/set_timeout:
  #
    sets the timeout for getting events

    Must be called after the input-output object's current time has been set.

    Topic: Input-Output Events

    See also: @Input-Output Events, get_events
  (
    self # the input-output object
    timeout # a timeout or point in time
  )
  update_if timeout.is_a_number &timeout -> current_time_of(self)+timeout
  $current_timeout timeout_of(self)
  if
    current_timeout.is_undefined || timeout < current_timeout
    -> self(.timeout_of timeout)
    -> self

$std::initialize_logging:
  (
    io
    log_level = 3
    log_filename = undefined
  )
  if
    log_filename.is_defined:
      open! $log_fd log_filename "w+"
      dup2! log_fd STDERR_FILENO
      close! log_fd
      enable_logging io log_level
    :
      fstat! $stdout_info STDOUT_FILENO
      fstat! $stderr_info STDERR_FILENO
      if
	||
	  inode_number_of(stderr_info) != inode_number_of(stdout_info)
	  device_of(stderr_info) != device_of(stdout_info)
	:
	  enable_logging io log_level
	-> io

$std_types::io/enable_logging:
  #
    enables logging

    Topic: Input-Output Events

    See also: @Input-Output Events, disable_logging
  (
    self # the input-output object
    level = 1 # the log level
  )
  -> self(.log_level_of level)

$std_types::io/disable_logging:
  #
    disables logging

    Topic: Input-Output Events

    See also: @Input-Output Events, enable_logging
  (
    self # the input-output object
  )
  -> self(.log_level_of 0)

$std_types::io/log:
  #
    logs a message

    Topic: Input-Output Events

    See also: @Input-Output Events, enable_logging, disable_logging
  (
    self # the input-output object
    level = 1 # the log level
    message # the log message
  )
  if
    level <= log_level_of(self):
      update_if_not message.is_a_string &message -> message()
      update_if_not message .has_suffix. '@nl;' &message: push message '@nl;'
      $lines split_into_lines(message)
      $prefix "[@(level)] "
      $buf append(prefix lines(1))
      range &lines 2 -1
      for_each lines
	: (line)
	  append &buf spaces(length_of(prefix)) line
	  next
	:
	  write self STDERR_FILENO buf.to_utf8
    -> self

$std_types::io/register_handlers:
  #
    registers event handlers for the given file descriptor

    Topic: Input-Output Events

    See also: @Input-Output Events, deregister_handlers, deregister_all_handlers
  (
    self # the input-output object
    id # the id (file descriptor, job) associated with the event
    type_handlers* # the event handlers
  )
  $handlers default_value(handlers_of(self)(id) empty_hash_table)
  for_each type_handlers
    : (type_handler)
      type_handler $type $handler
      !handlers(type) handler
      next
    :
      !self.handlers_of(id) handlers
      -> self

$std_types::io/deregister_handlers:
  #
    deregisters event handlers for the given id

    Topic: Input-Output Events

    See also: @Input-Output Events, deregister_all_handlers, register_handlers
  (
    self # the input-output object
    id # the id (file descriptor, job) associated with the event
    types* # the handler types to deregister
  )
  $handlers handlers_of(self)(id)
  if
    handlers.is_undefined
    -> self
    :
      for_each types
	: (type)
	  !handlers(type) undefined
	  next
	:
	  !self.handlers_of(id) handlers
	  -> self

$std_types::io/deregister_all_handlers:
  #
    deregisters all event handlers for the given id

    Topic: Input-Output Events

    See also: @Input-Output Events, deregister_handlers, register_handlers
  (
    self # the input-output object
    id # the id (file descriptor, job) associated with the event
  )
  !self.handlers_of(id) empty_hash_table
  -> self

$std_types::io/register_resource:
  #
    registers a resource

    Topic: Input-Output Events

    See also: @Input-Output Events
  (
    self # the input-output object
    key # the resource key
    resource # the resource to register
  )
  !self.resources_of(key) resource
  -> self

$std_types::io/run:
  #
    runs a job on the next call to <get_events>

    Topic: Input-Output Events

    See also: @Input-Output Events, run_at
  (
    self # the input-output object
    command # the job to run
    arguments* # the arguments for the job
  )
  push &self.start_jobs_of tuple(command arguments)
  -> self

$std_types::io/run_at:
  #
    runs a job at the given time

    Topic: Input-Output Events

    See also: @Input-Output Events, run
  (
    self # the input-output object
    time # the time to run the job
    command # the job to run
    arguments* # the arguments for the job
  )
  update_if time.is_a_number &time -> current_time_of(self)+time
  push &self.timed_jobs_of tuple(command arguments time)
  -> self

$std_types::io/exit:
  #
    exits the program

    Topic: Input-Output Events

    See also: @Input-Output Events
  (
    self # the input-output object
    exit_code # the exit code
  )
  ->
    self
      .exit_code_of exit_code
      .read_jobs_of empty_hash_table

$std_types::io/is_empty:
  #
    checks if the input-output object contains any event registrations

    Topic: Input-Output Events

    See also: @Input-Output Events
  (
    self # the input-output object
  )
  ->
    &&
      read_jobs_of(self).is_empty
      write_jobs_of(self).is_empty
      close_jobs_of(self).is_empty
      watched_pids_of(self).is_empty

$std::log_unhandled_event: (io event)
  event $type $fd $_argument
  if
    &&
      ||
	type == WRITE_FAILED
	type == WRITE_PENDING
	type == WRITE_COMPLETED
      fd == STDERR_FILENO
    -> io # prevent recursive logging
    :
      $log_level
	case
	  type
	  WRITE_PENDING,WRITE_COMPLETED -> 4
	  -> 2
      log io log_level -> "
	unhandled event @(serialize(type).trim_right) - @(serialize(fd))@

$std_types::io/initialize:
  #
    initializes the input-output object

    This function needs I/O-access rights.

    Topic: Input-Output Events

    See also: @Input-Output Events
  (
    self # the input-output object
  )
  current_time! $t
  -> self(.current_time_of t)

$std_types::io/get_events:
  #
    gets one or more events

    For an example see <@Input-Output Events>.

    Topic: Input-Output Events

    See also: @Input-Output Events, read, read_error, write_pending,
  (
    self # the input-output object
  )
  #
    <pselect> does not check for interrupts if a file descriptor is available
    without the need to wait

  inc &self.step_no_of

  attempt_close_operations! &self
    # perform all close jobs without pending writes
  attempt_exit! &self
    # exit if nothing to do and exit code is defined

  $events empty_list
  $want_to_write empty_list

  current_time! $t
  $start_jobs start_jobs_of(self)
  !self.start_jobs_of empty_list
  $first_job_time undefined
  $remaining_timed_jobs empty_list
  $timeout undefined
  for_each timed_jobs_of(self)
    : (timed_job)
      timed_job $_command $_arguments $time
      if
	time <= t:
	  push &start_jobs timed_job
	  next!
	:
	  push &remaining_timed_jobs timed_job
	  if
	    first_job_time.is_undefined || time < first_job_time:
	      !first_job_time time
	      next!
	    next
    :
      !self.timed_jobs_of remaining_timed_jobs
      set_timeout!

  $set_timeout:
    !timeout timeout_of(self)
    if
      timeout.is_defined || first_job_time.is_defined:
	update_if timeout.is_undefined || first_job_time < timeout
	  &timeout -> first_job_time
	!self.timeout_of undefined
	!timeout max(timeout-t 0)
	if
	  &&
	    timeout > 0
	    any_of
	      exit_codes_of(self): (pid _exit_code)
		-> watched_pids_of(self)(pid)
	  :
	    !timeout 0
	    handle_start_jobs!
	  handle_start_jobs
      handle_start_jobs

  $handle_start_jobs:
    for_each start_jobs
      : (job)
	job $command $arguments
	apply! command &self arguments $new_event
	if
	  new_event.is_defined:
	    if
	      new_event.is_a_list:
		append &events new_event
		next!
	      :
		push &events new_event
		next!
	  next
      handle_write_jobs

  $handle_write_jobs:
    for_each write_jobs_of(self)
      : (fd _text)
	push &want_to_write fd
	next!
      wait_for_events

    $wait_for_events:
      $read_descriptor_list empty_list
      for_each !read_descriptor_list read_jobs_of(self)
	: (fd _info)
	  push &read_descriptor_list fd
	  next!
	-> read_descriptor_list
      pselect!
	$signals
	$can_read read_descriptor_list
	$can_write want_to_write
	$_has_out_of_band_data empty_list
	timeout
      current_time! !self.current_time_of
      $injected_into_stdin false
      $write_jobs write_jobs_of(self)
      for_each signals
	: (signal)
	  case signal
	    CHILD_CHANGED_STATE:
	      wait! $pid $status
	      exitstatus &status
	      if
		watched_pids_of(self)(pid):
		  !self.watched_pids_of(pid) false
		  push &events new(std_types::event PROCESS_JOINED pid status)
		  next!
		:
		  !self.exit_codes_of(pid) status
		  next!
	    WINDOW_CHANGED_SIZE:
	      !self.window_change_event_occurred true
	      next!
	    :
	      if
		catched_signals_of(self)(signal):
		  push &events new(std_types::event SIGNAL undefined signal)
		  next!
		next
	handle_write_requests

      $handle_write_requests:
	if
	  &&
	    self.window_change_event_occurred
	    self.do_inject_window_change_events
	    read_jobs_of(self)(STDIN_FILENO).is_defined
	  :
	    get_terminal_size! STDIN_FILENO $width $height
	    !self.window_change_event_occurred false
	    $buf "@esc;[8;@(height);@(width)t"
	    push &events new(std_types::event READ STDIN_FILENO buf)
	    !injected_into_stdin true
	    check_file_descriptors!
	  :
	    check_file_descriptors!

      $check_file_descriptors:
	for_each can_write
	  : (fd)
	    $job write_jobs(fd)
	    write! $bytes_written fd job
	    if
	      bytes_written.is_an_error:
		!self.write_jobs_of(fd) undefined
		push &events
		  new
		    std_types::event WRITE_FAILED
		    fd
		    bytes_written #tuple(bytes_written job)
		next!
	      :
		if
		  bytes_written < length_of(job):
		    range &job bytes_written+1 -1
		    !self.write_jobs_of(fd) job # remaining text to write
		    push &events new(std_types::event WRITE_PENDING fd job)
		    next!
		  :
		    !self.write_jobs_of(fd) undefined
		    push &events
		      new(std_types::event WRITE_COMPLETED fd undefined)
		    next!
	  attempt_reads

      $attempt_reads:
	for_each can_read
	  : (fd)
	    if_not fd != STDIN_FILENO || not(injected_into_stdin) next:
	      fstat! fd $info
	      if
		type_of(info) == SOCKET:
		  is_listening! $does_listen fd
		  if
		    does_listen:
		      accept! $conn fd
		      if
			conn.is_an_error:
			  push &events
			    new(std_types::event READ_FAILED fd conn)
			  next!
			:
			  push &events
			    new(std_types::event CONNECT fd conn)
			  next!
		    do_read
		do_read

	      $do_read:
		$do_close_and_max_length read_jobs_of(self)(fd)
		do_close_and_max_length $do_close $max_length
		$length
		  if
		    max_length.is_defined && max_length < 0x10'0000
		    -> max_length
		    -> 0x10'0000
		read! $buf fd length
		if
		  buf.is_an_error:
		    push &events new(std_types::event READ_FAILED fd buf)
		    if
		      do_close:
			close &self fd
			next!
		      next
		  :
		    if
		      buf.is_empty:
			stop_reading_from &self fd
			push &events new(std_types::event CLOSED fd undefined)
			if
			  do_close:
			    close &self fd
			    next!
			  next
		      :
			push &events new(std_types::event READ fd buf)
			if
			  max_length.is_defined:
			    if
			      length_of(buf) < max_length:
				!self.read_jobs_of(fd)
				  tuple(true max_length-length_of(buf))
				next!
			      :
				stop_reading_from &self fd
				if
				  do_close:
				    close &self fd
				    next!
				  next
			  next
	  :
	    attempt_close_operations! &self
	      # perform all close jobs without pending writes
	    attempt_exit! &self
	      # exit if nothing to do and exit code is defined
	    -> self events

$attempt_close_operations: (io)
  for_each close_jobs_of(io)
    : (fd)
      if
	write_jobs_of(io)(fd).is_undefined:
	  close! fd
	  !io.close_jobs_of(fd) false
	  next!
	next
    -> io

$attempt_exit: (io)
  if
    exit_code_of(io).is_defined:
      for_each resources_of(io)
	: (resource)
	  if
	    do_log_of(resource):
	      log &io 3 "finalizing @(name_of(resource))"
	      finalize_resource!
	    finalize_resource

	  $finalize_resource:
	    finalize! resource &io
	    next!
	:
	  !io.resources_of empty_list
	  if
	    io.is_empty:
	      exit! exit_code_of(io)
	    -> io
    -> io

$std::handle_events: (io events)
  $new_events empty_list
  $handlers handlers_of(io)
  for_each events
    : (event)
      event $type $id $argument
      $id_handlers handlers(id)
      if
	id_handlers.is_undefined
	keep_event
	:
	  $handler id_handlers(type)
	  if
	    handler.is_undefined
	    keep_event
	    :
	      handler &io $new_event id argument
	      if
		new_event.is_defined:
		  update_if_not new_event.is_a_list
		    &new_event -> list(new_event)
		  handle_events &io &new_event
		  append &new_events new_event
		  next!
		next

      $keep_event:
	push &new_events event
	next!
    -> io new_events
