#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Grammar Objects

  Grammar objects support methods for matching and searching.

$std::match ()
  #
    match the grammar object with the start of the specified string

    Parameters:
      object # the grammar object
      string # the string to match

    Result:
      n # the number of matched characters

    If the match is unsuccessful, then *n* is <undefined>.

    Topic: Grammar Objects, Strings

    See also: match_back, search

$std::match_back ()
  #
    match the grammar object with the end of the specified string

    Parameters:
      object # the grammar object
      string # the string to match

    Result:
      n # the number of matched characters

    If the match is unsuccessful, then *n* is <undefined>.

    Topic: Grammar Objects, Strings

    See also: match, search

$std::search ()
  #
    search from the grammar object from the start or end of the specified string

    Parameters:
      object # the grammar object
      string # the string to search
      nth # search for the nth occurrence of the grammar object

    Results:
      pos # the position of the match measured from the start of the string
      len # the number of matched characters

    Negative values of *nth* search from the end of the string.

    Topic: Grammar Objects, Strings

    See also: match, match_back

$std_types::FUNKY_IDENTIFIER std_types::object
  #
    a grammar object type for matching Funky identifiers

    Topic: Grammar Objects

    See also: std_types::match, std_types::search

$std::FUNKY_IDENTIFIER std_types::FUNKY_IDENTIFIER
  #
    the single instance of the Funky identifier grammar object type

    Topic: Grammar Objects

    See also: std_types::match, std_types::search

$std_types::FUNKY_IDENTIFIER/match:
  #
    checks whether the specified string starts with a Funky identifier

    Result:
      len # the number of matched characters or <undefined> if the match is
	    unsuccessful

    Topic: Grammar Objects, Strings

    See also: std_types::FUNKY_IDENTIFIER, std_types::match_back,
	      std_types::search
  (
    _self # FUNKY_IDENTIFIER
    str # the string to match with
  )
  $i 1
  $n length_of(str)

  if
    n == 0
    -> undefined
    :
      case str(1)
	'a' .. 'z', 'A' .. 'Z' within_word
	-> undefined

  $within_word:
    inc &i
    if
      i > n
      -> n
      :
	case str(i)
	  'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
	  '_' word_start
	  -> i-1

  $word_start:
    inc &i
    case str(i)
      'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
      -> undefined

$std_types::FUNKY_IDENTIFIER/match_back:
  #
    checks whether the specified string ends with a Funky identifier

    Result:
      len # the number of matched characters or <undefined> if the match is
	    unsuccessful

    Topic: Grammar Objects, Strings

    See also: std_types::FUNKY_IDENTIFIER, std_types::match, std_types::search
  (
    _self # FUNKY_IDENTIFIER
    str # the string to match with
  )
  $n length_of(str)
  $i n+1
  word_end

  $word_end:
    dec &i
    if
      i < 1
      -> undefined
      :
	case str(i)
	  'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
	  -> undefined

  $within_word:
    dec &i
    if
      i < 1
      check_start
      :
	case str(i)
	  'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
	  '_' word_end
	  check_start

  $check_start:
    if
      str(i+1) >= '0' && str(i+1) <= '9'
      -> undefined
      -> n-i

$std_types::FUNKY_IDENTIFIER/search:
  #
    searches for the nth occurrence of a Funky identifier

    Result:
      pos # the position of the match measured from the start of the string
      len # the number of matched characters

    Negative values of *nth* search from the end of the string.

    Topic: Grammar Objects, Strings

    See also: std_types::FUNKY_IDENTIFIER, FUNKY_IDENTIFIER/match,
	      FUNKY_IDENTIFIER/match_back
  (
    _self # FUNKY_IDENTIFIER
    str # the string to search
    nth = 1 # the nth occurrence to search for
  )
  $n length_of(str)
  if
    nth < 0
    search_backwards
    search_forwards

  $search_forwards:
    $i 0
    $s undefined
    search_for_word_start

    $search_for_word_start:
      inc &i
      if
	i > n
	-> undefined undefined
	:
	  case str(i)
	    'a' .. 'z', 'A' .. 'Z':
	      if
		i == 1:
		  !s 1
		  within_word
		:
		  case str(i-1)
		    'a' .. 'z', 'A' .. 'Z', '0' .. '9', '_'
		    search_for_word_start
		    :
		      !s i
		      within_word
	    search_for_word_start

    $within_word:
      inc &i
      if
	i > n:
	  if
	    nth > 1
	    -> undefined undefined
	    -> s i-s
	:
	  case str(i)
	    'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
	    '_' word_start
	    :
	      if
		nth > 1:
		  dec &nth
		  search_for_word_start
		-> s i-s

    $word_start:
      inc &i
      if
	i > n
	-> undefined undefined
	:
	  case str(i)
	    'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
	    search_for_word_start

  $search_backwards:
    $i n+1
    $e undefined
    search_for_word_end

    $search_for_word_end:
      dec &i
      if
	i < 1
	-> undefined undefined
	:
	  case str(i)
	    'a' .. 'z', 'A' .. 'Z', '0' .. '9':
	      !e i
	      within_word
	    search_for_word_end

    $within_word:
      dec &i
      if
	i < 1:
	  check_start -> undefined undefined
	:
	  case str(i)
	    'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
	    '_' word_end
	    :
	      check_start search_for_word_end

    $word_end:
      dec &i
      if
	i < 1
	-> undefined undefined
	:
	  case str(i)
	    'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
	    search_for_word_end

    $check_start: (continuation)
      $chr str(i+1)
      if
	chr >= '0' && chr <= '9'
	continuation
	:
	  inc &nth
	  if
	    nth == 0
	    -> i+1 e-i
	    continuation

$std_types::WHITESPACE std_types::object
  #
    a grammar object type for matching whitespace characters

    Topic: Grammar Objects

    See also: std_types::match, std_types::search

$std::WHITESPACE std_types::WHITESPACE
  #
    the single instance of the whitespace grammar object type

    Topic: Grammar Objects

    See also: std_types::match, std_types::search

$std_types::WHITESPACE/match:
  #
    checks whether the specified string starts with whitespace characters

    Result:
      len # the number of matched characters or <undefined> if the match is
	    unsuccessful

    Topic: Grammar Objects, Strings

    See also: std_types::WHITESPACE, std_types::match_back,
	      std_types::search

    Example:

      $str "@ht;  This is a text."
      match WHITESPACE str $len
      dump! `len

    Output:

      len: 3

    Example:

      $str "This is a text."
      match WHITESPACE str $len
      dump! `len

    Output:

      len: <undefined>
  (
    _self # WHITESPACE
    str # the string to match with
  )
  $i 0
  $n length_of(str)
  if
    n == 0
    -> undefined
    :
      loop:
	inc &i
	if
	  i > n
	  -> n
	  :
	    if
	      str(i).is_a_whitespace_character
	      next
	      :
		if
		  i > 1
		  -> i-1
		  -> undefined

$std_types::WHITESPACE/match_back:
  #
    checks whether the specified string ends with whitespace characters

    Result:
      len # the number of matched characters or <undefined> if the match is
	    unsuccessful

    Topic: Grammar Objects, Strings

    See also: std_types::WHITESPACE, std_types::match, std_types::search

    Example:

      $str "This is a text."
      match_back WHITESPACE str $len
      dump! `len

    Output:

      len: <undefined>

    Example:

      $str "This is a text.@nl;"
      match_back WHITESPACE str $len
      dump! `len

    Output:

      len: 1
  (
    _self # WHITESPACE
    str # the string to match with
  )
  $n length_of(str)
  if
    n == 0
    -> undefined
    :
      $i n+1
      loop:
	dec &i
	if
	  i < 1
	  -> n
	  :
	    if
	      str(i).is_a_whitespace_character
	      next
	      :
		if
		  i < n
		  -> n-i
		  -> undefined

$std_types::WHITESPACE/search:
  #
    searches for the nth occurrence of whitespace characters

    Result:
      pos # the position of the match measured from the start of the string
      len # the number of matched characters

    Negative values of *nth* search from the end of the string.

    Topic: Grammar Objects, Strings

    See also: std_types::WHITESPACE, WHITESPACE/match, WHITESPACE/match_back

    Example:

      $str "This is a text."
      search WHITESPACE str 2 $pos $len
      dump! `pos `len

    Output:

      pos: 8
      len: 1

    Example:

      $str "This is a text.@nl;"
      search WHITESPACE str -1 $pos $len
      dump! `pos `len

    Output:

      pos: 10
      len: 1
  (
    _self # WHITESPACE
    str # the string to search
    nth = 1 # the nth occurrence to search for
  )
  $n length_of(str)
  if
    nth < 0
    search_backwards
    search_forwards

  $search_forwards:
    $i 0
    $s undefined
    search_for_whitespace

    $search_for_whitespace:
      inc &i
      if
	i > n
	-> undefined undefined
	:
	  if
	    str(i).is_a_whitespace_character
	    :
	      !s i
	      match_more_whitespace
	    search_for_whitespace

    $match_more_whitespace:
      inc &i
      if
	i > n:
	  if
	    nth > 1
	    -> undefined undefined
	    -> s i-s
	:
	  if
	    str(i).is_a_whitespace_character
	    match_more_whitespace
	    :
	      if
		nth > 1:
		  dec &nth
		  search_for_whitespace
		-> s i-s

  $search_backwards:
    $i n+1
    $e undefined
    search_for_whitespace

    $search_for_whitespace:
      dec &i
      if
	i < 1
	-> undefined undefined
	:
	  if
	    str(i).is_a_whitespace_character
	    :
	      !e i
	      match_more_whitespace
	    search_for_whitespace

    $match_more_whitespace:
      dec &i
      if
	i < 1:
	  inc &nth
	  if
	    nth == 0
	    -> 1 e
	    -> undefined undefined
	:
	  if
	    str(i).is_a_whitespace_character
	    match_more_whitespace
	    :
	      inc &nth
	      if
		nth == 0
		-> i+1 e-i
		search_for_whitespace

$expression_of ()

$std_types::many std_types::object

$std::many:
  #
    creates a grammar object that matches one or more occurrences of the
    specified expression
  (
    expr # the expression to match multiple times
  )
  -> std_types::many(.expression_of expr)

$std_types::many/match:
  #
    checks whether the specified string starts with one or more occurrences
    of the specified expression

    Result:
      len # the number of matched characters or <undefined> if the match is
	    unsuccessful

    Topic: Grammar Objects, Strings

    See also: std_types::many, std_types::many/match_back,
	      std_types::many/search

    Example:

      $str "12345abcdef"
      match many(DIGIT) str $len
      dump! `len

    Output:

      len: 5
  (
    self # many
    str # the string to match with
  )
  $expr expression_of(self)
  match $i expr str
  if
    i.is_undefined || i == 0
    -> i
    :
      !i i+1
      $n length_of(str)
      loop:
	if
	  i > n
	  -> n
	  :
	    match $len expr range(str i n)
	    if
	      len.is_undefined || len == 0
	      -> i-1
	      :
		plus &i len
		next

$std_types::many/match_back:
  #
    checks whether the specified string ends with one or more occurrences
    of the specified expression

    Result:
      len # the number of matched characters or <undefined> if the match is
	    unsuccessful

    Topic: Grammar Objects, Strings

    See also: std_types::many, std_types::many/match, std_types::many/search

    Example:

      $str "12345abcdef"
      match_back many('a'..'z') str $len
      dump! `len

    Output:

      len: 6
  (
    self # many
    str # the string to match with
  )
  $expr expression_of(self)
  match_back $i expr str
  if
    i.is_undefined || i == 0
    -> i
    :
      $n length_of(str)
      !i n-i
      loop:
	if
	  i < 1
	  -> n
	  :
	    match_back $len expr range(str 1 i)
	    if
	      len.is_undefined || len == 0
	      -> n-i
	      :
		minus &i len
		next

$std_types::many/search:
  #
    searches for the nth occurrence of the specified expression

    Result:
      pos # the position of the match measured from the start of the string
      len # the number of matched characters

    Negative values of *nth* search from the end of the string.

    Topic: Grammar Objects, Strings

    See also: std_types::many, many/match, many/match_back

    Example:

      $str "ab12cde345fgh"
      search many(DIGIT) str 2 $pos $len
      dump! `pos `len

    Output:

      pos: 8
      len: 3
  (
    self # many
    str # the string to search
    nth = 1 # the nth occurrence to search for
  )
  $expr expression_of(self)
  $n length_of(str)
  if
    nth < 0
    search_backwards
    search_forwards

  $search_forwards:
    $i 1
    search_next

    $search_next:
      if
	i > n+1
	-> undefined undefined
	:
	  search expr range(str i n) 1 $pos $len
	  !i i+pos-1
	  if
	    i.is_undefined
	    -> undefined undefined
	    :
	      dec &nth
	      if
		len == 0:
		  if
		    nth < 1
		    -> i 0
		    :
		      inc &i
		      search_next
		:
		  $s i
		  loop:
		    plus &i len
		    match expr range(str i n) !len
		    if
		      len.is_undefined || len == 0:
			if
			  nth < 1
			  -> s i-s
			  :
			    inc &i
			    search_next
		      next

  $search_backwards:
    $i n
    search_next

    $search_next:
      if
	i < 1
	-> undefined undefined
	:
	  search expr range(str 1 i) -1 !i $len
	  if
	    i.is_undefined
	    -> undefined undefined
	    :
	      inc &nth
	      if
		len == 0:
		  if
		    nth >= 0
		    -> i n-i+1
		    :
		      dec &i
		      search_next
		:
		  dec &i
		  $e i+len
		  loop:
		    match_back expr range(str 1 i) !len
		    if
		      len.is_undefined || len == 0:
			if
			  nth >= 0
			  -> i+1 e-i
			  :
			    dec &i
			    search_next
		      :
			minus &i len
			next

$std::DIGIT '0'..'9'
$std::LETTER 'a'..'z', 'A'..'Z'
#$std::ALPHANUMERIC alt(std::LETTER std::DIGIT)

$std::alt std::hash_set
