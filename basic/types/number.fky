#
  Copyright (C) 2022 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Numbers

  See also: std_types::number, std_types::integer, std_types::real

$std::is_a_number () # obvious
$std::is_an_integer () # obvious

$std_types::object.is_a_number false
  #
    obvious

    Topic: Objects

$std_types::object.is_an_integer false
  #
    obvious

    Topic: Objects

$std_types::number.is_a_number true
  #
    obvious

    Topic: Numbers

$std_types::integer.is_an_integer true
  #
    obvious

    Topic: Numbers

$std_types::number.neutral_element_of 0

$std_types::number/floor:
  #
    default implementation for all kind of numbers
  (
    self
  )
  -> self

$std_types::number/ceil:
  #
    default implementation for all kind of numbers
  (
    self
  )
  -> self

$std_types::number/round:
  #
    default implementation for all kind of numbers
  (
    self
  )
  -> self

$std_types::integer/serialize:
  (
    self
    indent = undefined
  )
  to_string &self
  update_if indent.is_defined &self -> append(tabs_and_spaces(indent) self)
  push self '@nl;'

$std_types::real/serialize:
  (
    self
    indent = undefined
  )
  to_string &self
  update_if not(self .contains. '.') &self -> append(self ".0")
  update_if indent.is_defined &self -> append(tabs_and_spaces(indent) self)
  push self '@nl;'
