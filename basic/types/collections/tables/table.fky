#
  Copyright (C) 2023 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

##########
# table
##########

$std::is_a_table () # obvious
$std_types::object.is_a_table false # obvious
$std_types::table.is_a_table true # obvious

$std_types::table std_types::collection
  #
    the prototype object for all tables

    A table is a key-value-store. It associcates keys with values.

    Topic: Collections

    See also: std_types::hash_table, std_types::key_order_table,
	      std_types::association_list

$std::keys_of: (collection)
  map_reduce collection
    : (key _value) list key
    append
    empty_list

$std::values_of: (collection)
  map_reduce collection
    : (_key value) list value
    append
    empty_list

###
# merge

$std_types::table/merge:
  #
    merges the two tables

    If a key is contained in both tables and *merge_function* is not specified
    then the value from the *other* table is used for the merged table.

    The *merge_function* is applied only if both tables contain a value for the
    same key.
  (
    self # the base table
    other # the table to merge
    merge_function = undefined # the function used to merge corresponding values
  )
  if
    merge_function.is_defined:
      for_each other
	: (key value)
	  $my_value self(key)
	  if
	    my_value.is_defined:
	      !self(key) merge_function(my_value value)
	      next
	    :
	      !self(key) value
	      next
	-> self
    :
      for_each other
	: (key value)
	  !self(key) value
	  next
	-> self

###
# serialization

$std_types::table/serialize:
  (
    self
    indent = undefined
  )
  $new_indent
    if
      indent.is_defined
      -> indent+2
      -> undefined
  map_reduce $contents
    self: (key value)
      append serialize(key new_indent) serialize(value new_indent)
    append
    ""
  $header
    "
      @(serialization_tag_of(self)) <@(2*length_of(self))>
  update_if indent.is_defined &header -> append(tabs_and_spaces(indent) header)
  append header contents

$std::create_index_table:
  #
    creates an index table for the specified collection
  (
    items
    attribute_of
  )
  $index_table empty_hash_table
  for_each items
    : (idx item)
      !index_table(attribute_of(item)) idx
      next
    -> index_table

$std_types::table/to_list:
  (
    self
  )
  map_reduce
    self
    : (item) -> list(item)
    append
    empty_list

$std_types::table.deserializer_of:
  (
    type
    items
  )
  $obj empty_collection_of(type)
  $n length_of(items) >> 1
  from_to 1 n
    : (i)
      $key items(2*i-1)
      $value items(2*i)
      !obj(key) value
      next
    -> obj
