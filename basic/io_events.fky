#
  Copyright (C) 2022 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or print to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

$std::READ .
  # returns the read text
$std::READ_ERROR .
  # returns the error message
$std::WRITE_PENDING .
  # returns the text not yet written
$std::WRITE_COMPLETED .
  # returns <undefined>
$std::WRITE_ERROR .
$std::PROCESS_JOINED .
  #
    returns a tuple of the error message and the text not yet written;
    the write is cancelled
$std::SIGNAL .
  # returns the signal that occurred

$std::get_events ()
$std::start_reading_from ()
$std::stop_reading_from ()
$std::write_to ()
$std::cancel_write_to ()
$std::join_process ()
$std::start_injecting_window_change_events ()
$std::stop_injecting_window_change_events ()
$std::start_catching_signals ()
$std::stop_catching_signals ()

$read_descriptor_list_of ()
$read_descriptor_set_of ()
$write_jobs_of ()
$watched_pids_of ()
$exit_codes_of ()
$do_inject_window_change_events ()
$do_catch_signals ()
$window_change_event_occurred ()

$std_types::io std_types::object
$std_types::io.read_descriptor_list_of empty_list
$std_types::io.read_descriptor_set_of empty_hash_set
$std_types::io.write_jobs_of empty_hash_table
$std_types::io.watched_pids_of empty_hash_set
$std_types::io.exit_codes_of empty_hash_table
$std_types::io.do_inject_window_change_events false
$std_types::io.window_change_event_occurred false

$std_types::event tuple(undefined undefined undefined)

$std_types::io/start_reading_from: (self fd)
  if
    read_descriptor_set_of(self)(fd)
    -> self
    :
      !self.read_descriptor_set_of(fd) true
      push &self.read_descriptor_list_of fd
      -> self

$std_types::io/stop_reading_from: (self fd)
  if
    read_descriptor_set_of(self)(fd)
    :
      !self.read_descriptor_set_of(fd) false
      $new_read_descriptor_list empty_list
      for_each read_descriptor_list_of(self)
	: (read_fd)
	  if
	    fd == read_fd
	    next
	    :
	      push &new_read_descriptor_list read_fd
	      next
	:
	  !self.read_descriptor_list_of new_read_descriptor_list
	  -> self
    -> self

$std_types::io/write_to: (self fd text)
  $job write_jobs_of(self)(fd)
  !job
    if
      job.is_defined
      -> append(job text)
      -> text
  !self.write_jobs_of(fd) job
  -> self

$std_types::io/cancel_write_to: (self fd)
  $unwritten_text write_jobs_of(self)(fd)
  !self.write_jobs_of(fd) undefined
  -> self unwritten_text

$std_types::io/join_process: (self pid)
  !self.watched_pids_of(pid) true
  -> self

$std_types::io/start_injecting_window_change_events: (self)
  !self.do_inject_window_change_events true
  -> self

$std_types::io/stop_injecting_window_change_events: (self)
  !self.do_inject_window_change_events false
  -> self

$std_types::io/start_catching_signals: (self)
  !self.do_catch_signals true
  -> self

$std_types::io/stop_catching_signals: (self)
  !self.do_catch_signals false
  -> self

$std_types::io/is_empty: (self)
  ->
    &&
      read_descriptor_list_of(self).is_empty
      write_jobs_of(self).is_empty
      watched_pids_of(self).is_empty

$std_types::io/is_not_empty: (self)
  ->
    ||
      read_descriptor_list_of(self).is_not_empty
      write_jobs_of(self).is_not_empty
      watched_pids_of(self).is_not_empty

$std_types::io/get_events:
  (
    self
    timeout = undefined
  )
  #
    <pselect> does not check for interrupts if a file descriptor is available
    without the need to wait

  $want_to_write_to empty_list
  update_if # do not wait if an exit code is pending
    &&
      timeout.is_defined
      any_of
	exit_codes_of(self): (pid _exit_code)
	  -> watched_pids_of(self)(pid)
    &timeout
    -> 0
  for_each write_jobs_of(self)
    : (fd _text)
      push &want_to_write_to fd
      next!
    :
      pselect!
	$signals
	$can_read_from read_descriptor_list_of(self)
	$can_write_to want_to_write_to
	$_has_out_of_band_data empty_list
	timeout
      $events empty_list
      $write_jobs write_jobs_of(self)
      for_each signals
	: (signal)
	  case signal
	    CHILD_CHANGED_STATE:
	      wait! $pid $status
	      exitstatus &status
	      if
		watched_pids_of(self)(pid):
		  !self.watched_pids_of(pid) false
		  push &events new(std_types::event PROCESS_JOINED pid status)
		  next!
		:
		  !self.exit_codes_of(pid) status
		  next!
	    WINDOW_CHANGED_SIZE:
	      !self.window_change_event_occurred true
	      next!
	    SIGUSR1, SIGUSR2:
	      if
		self.do_catch_signals:
		  push &events new(std_types::event SIGNAL undefined signal)
		  next!
		next
	:
	  $injected_into_stdin false
	  if
	    &&
	      self.window_change_event_occurred
	      self.do_inject_window_change_events
	      read_descriptor_set_of(self)(STDIN_FILENO)
	    :
	      get_terminal_size! STDIN_FILENO $width $height
	      !self.window_change_event_occurred false
	      $buf "@esc;[8;@(height);@(width)t"
	      push &events new(std_types::event READ STDIN_FILENO buf)
	      !injected_into_stdin true
	      check_file_descriptors!
	    :
	      check_file_descriptors!

	  $check_file_descriptors:
	    for_each can_write_to
	      : (fd)
		$job write_jobs(fd)
		write! $bytes_written fd job
		if
		  bytes_written.is_an_error:
		    !self.write_jobs_of(fd) undefined
		    push &events
		      new
			std_types::event WRITE_ERROR
			fd
			tuple(bytes_written job)
		    next!
		  :
		    if
		      bytes_written < length_of(job):
			range &job bytes_written+1 -1
			!self.write_jobs_of(fd) job # remaining text to write
			push &events new(std_types::event WRITE_PENDING fd job)
			next!
		      :
			!self.write_jobs_of(fd) undefined
			push &events
			  new(std_types::event WRITE_COMPLETED fd undefined)
			next!
	      :
		for_each can_read_from
		  : (fd)
		    if_not fd != STDIN_FILENO || not(injected_into_stdin) next:
		      read! $buf fd 0x10000
		      if
			buf.is_an_error:
			  push &events new(std_types::event READ_ERROR fd buf)
			  next!
			:
			  push &events new(std_types::event READ fd buf)
			  next!
		  -> self events
