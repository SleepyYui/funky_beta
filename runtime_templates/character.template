#
  Copyright (C) 2021 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

TYPE std_types::character -> std_types::object
  #
    a unicode code point encoded as a 32-bit value

    See also: std_types::string
  uint32_t code

METHOD std_types::character/_type
  {
    RUNTIME_ERROR("Attempt to call a character value as a function!")
  }

FUNCTION NODE *from_uchar32
  (
    uint32_t code
  )
  {
    return CREATE(std_types::character, code);
  }

METHOD uint32_t std_types::character/_to_uchar32
  (
    NODE *node,
    uint32_t *result_p
  )
  {
    *result_p = node->character.code;
    return true;
  }

FUNCTION std::character
  #
    returns the character with the specified unicode
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    uint32_t code;
    CHECK(to_uint32(ARGUMENTS(0), &code))
    RETURN_SINGLE_RESULT(CREATE(std_types::character, code))
  }

METHOD std_types::character/plus
  #
    returns the *n*th-next character

    Parameter chr: the base character

    Parameter n: the number of characters to skip

    See also: std_types::character/minus
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    long offset;
    CHECK(to_long(ARGUMENTS(1), &offset))
    long code = (long)ARGUMENTS(0)->character.code+offset;
    if (code >= 0x100000000LL || code < 0) INVALID_ARGUMENTS
    RETURN_SINGLE_RESULT(CREATE(std_types::character, (uint32_t)code))
  }

METHOD std_types::character/minus
  #
    returns the *n*th-previous character

    Parameter chr: the base character

    Parameter n: the number of characters to skip

    See also: std_types::character/plus
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::character)) {
      RETURN_SINGLE_RESULT(
        from_long(
          (long)ARGUMENTS(0)->character.code-(long)ARGUMENTS(1)->character.code));
    } else {
      long offset;
      CHECK(to_long(ARGUMENTS(1), &offset))
      long code = (long)ARGUMENTS(0)->character.code-offset;
      if (code >= 0x100000000LL || code < 0) INVALID_ARGUMENTS
      RETURN_SINGLE_RESULT(CREATE(std_types::character, (uint32_t)code))
    }
  }

METHOD std_types::character/equal
  #
    compares two characters for equality
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::character)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->character.code == ARGUMENTS(1)->character.code)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::error)) {
      INVALID_ARGUMENTS
    } else {
      RETURN_FALSE
    }
  }

METHOD std_types::character/less
  #
    numerically compares the unicodes of the two specified characters
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::character)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->character.code < ARGUMENTS(1)->character.code)
    }
    INVALID_ARGUMENTS
  }

METHOD std_types::character/hash
  #
    computes a numerical hash value
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    uint32_t hash = ARGUMENTS(0)->character.code;
    hash *= 179234567;
    hash ^= hash >> 27 | hash << 5;
    RETURN_SINGLE_RESULT(from_uint32(hash));
  }

METHOD std_types::character/to_string
  #
    returns a single-character string containing only the specified character
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    if (ARGUMENTS(0)->character.code <= 0xff) {
      char buf[1];
      buf[0] = ARGUMENTS(0)->character.code;
      RETURN_SINGLE_RESULT(from_latin_1_string((const uint8_t *)buf, 1))
    } else {
      RETURN_SINGLE_RESULT(from_uint32_string(&ARGUMENTS(0)->character.code, 1))
    }
  }

METHOD std_types::character/to_integer
  #
    returns the character's unicode as an integer value
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_SINGLE_RESULT(from_uint32(ARGUMENTS(0)->character.code))
  }

METHOD long std_types::character/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    if (node->character.code == '@') {
      return debug_print(indent, buf, "'@@'");
    } else if (node->character.code == '\'') {
      return debug_print(indent, buf, "'@apos;'");
    } else if (
      node->character.code >= 0x20 && node->character.code < 0x7f /*||
      node->character.code >= 0xa0 && node->character.code < 0x100*/
    ) {
      return debug_print(indent, buf, "'%c'", node->character.code);
    } else {
      return debug_print(indent, buf, "'@0x%x;'", node->character.code);
    }
  }
