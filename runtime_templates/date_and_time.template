#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,

POLY std::year_of
  #
    the calendar year of a date-and-time object

    Parameter:
      self # the date-and-time object

    Result:
      year # the calendar year of the date-and-time object

    Topic: Date and Time

    See also: month_of, day_of, day_of_week_of, hour_of, minute_of, second_of,
	      time_shift_of

    Example:

      current_time! $t
      println! year_of(t)

    Output:

      2024

POLY std::month_of
  #
    the month of a date-and-time object

    Parameter:
      self # the date-and-time object

    Result:
      month # the month of the date-and-time object

    Returned values are in the range 1 to 12 where 1 is January and 12 is
    December.

    Topic: Date and Time

    See also: year_of, day_of, day_of_week_of, hour_of, minute_of, second_of,
	      time_shift_of

    Example:

      current_time! $t
      println! month_of(t)

    Output:

      1

POLY std::day_of
  #
    the day of a month of a date-and-time object

    Parameter:
      self # the date-and-time object

    Result:
      day # the day of the month of the date-and-time object

    Returned values are in the range 1 to 31.

    Topic: Date and Time

    See also: year_of, month_of, day_of_week_of, hour_of, minute_of, second_of,
	      time_shift_of

    Example:

      current_time! $t
      println! day_of(t)

    Output:

      14

POLY std::day_of_week_of
  #
    the day of the week of a date-and-time object

    Parameter:
      self # the date-and-time object

    Result:
      day_of_week # the day of the week of the date-and-time object

    Returned values are in the range 1 to 7 where 1 is Monday and 7 is
    Sunday.

    Topic: Date and Time

    See also: year_of, month_of, day_of, hour_of, minute_of, second_of,
	      time_shift_of

    Example:

      current_time! $t
      println! day_of_week_of(t)

    Output:

      7

POLY std::hour_of
  #
    the hour of a date-and-time object

    Parameter:
      self # the date-and-time object

    Result:
      hour # the hour of the date-and-time object

    Returned values are in the range 0 to 23.

    Topic: Date and Time

    See also: year_of, month_of, day_of, day_of_week_of, minute_of, second_of,
	      time_shift_of

    Example:

      current_time! $t
      println! hour_of(t)

    Output:

      8

POLY std::minute_of
  #
    the minute of an hour of a date-and-time object

    Parameter:
      self # the date-and-time object

    Result:
      minute # the minute of the hour of the date-and-time object

    Returned values are in the range 0 to 59.

    Topic: Date and Time

    See also: year_of, month_of, day_of, day_of_week_of, hour_of, second_of,
	      time_shift_of

    Example:

      current_time! $t
      println! minute_of(t)

    Output:

      18

POLY std::second_of
  #
    the second of a minute of a date-and-time object

    Parameter:
      self # the date-and-time object

    Result:
      second # the second of the minute of the date-and-time object

    Returned values are in the range 0 to 59.

    Topic: Date and Time

    See also: year_of, month_of, day_of, day_of_week_of, hour_of, minute_of,
	      time_shift_of

    Example:

      current_time! $t
      println! second_of(t)

    Output:

      33

POLY std::time_shift_of
  #
    the time shift of a date-and-time object

    Parameter:
      self # the date-and-time object

    Result:
      time_shift # the time shift of the date-and-time object in seconds

    Topic: Date and Time

    See also: year_of, month_of, day_of, day_of_week_of, hour_of, minute_of,
	      second_of

    Example:

      current_time! $t
      println! time_shift_of(t)

    Output:

      3600

POLY std::seconds_since_epoch
  #
    the number of seconds since the epoch

    Parameter:
      self # the date-and-time object

    Result:
      seconds_since_epoch # the number of seconds since the epoch

    The returned number is an integer.

    Topic: Date and Time

    See also: year_of, month_of, day_of, day_of_week_of, hour_of, minute_of,
	      second_of, time_shift_of

    Example:

      current_time! $t
      println! seconds_since_epoch(t)

    Output:

      1711754036

TYPE std_types::date_and_time -> std_types::object
  #
    the prototype object for date-and-time objects

    Topic: Date and Time

    See also: year_of, month_of, day_of, day_of_week_of, hour_of, minute_of,
	      second_of, time_shift_of

  int64_t seconds
  int32_t nanoseconds

METHOD std_types::date_and_time/_type
  {
    RUNTIME_ERROR("Attempt to call a date-and-time object as a function!")
  }

METHOD long std_types::date_and_time/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return debug_print(indent, buf, "<date and time %d.%09d>",
      node->date_and_time.seconds, node->date_and_time.nanoseconds);
  }

FUNCTION std::from_unix_time
  #
    constructs a date-and-time object from the number of seconds since the
    UNIX epoch

    Parameter:
      seconds # the number of seconds since the UNIX epoch

    Result:
      date_and_time # the date-and-time object

    The UNIX epoch is the moment of 1 January 1970, 00:00:00 UTC.

    Topic: Date and Time

    See also: current_time

    Example:

      $t from_unix_time(0)
      println! t

    Output:

      1970-01-01 1:00:00.000 GMT+1
  {
    CHECK_ARGUMENTS(1)
    int64_t sec;
    CHECK(to_int64(ARGUMENTS(0), &sec))
    RETURN_SINGLE_RESULT(CREATE(std_types::date_and_time, sec, 0))
  }

FUNCTION std::date_and_time
  #
    constructs a date-and-time object

    Parameters:
      year # the year
      month # the month of the year
      day # the day of the month
      hour # the hour of the day
      minute # the minute of the hour
      second # the second of the minute

    Topic: Date and Time

    See also: current_time, from_unix_time

    Example:

      $t date_and_time(1993 7 14 12 34 56)
      println! t

    Output:

      1993-07-14 14:34:56.000 GMT+2
  {
    CHECK_ARGUMENTS(6)
    int year, month, day, hour, minute;
    double second;

    CHECK(to_int(ARGUMENTS(0), &year))
    CHECK(to_int(ARGUMENTS(1), &month))
    CHECK(to_int(ARGUMENTS(2), &day))
    CHECK(to_int(ARGUMENTS(3), &hour))
    CHECK(to_int(ARGUMENTS(4), &minute))
    CHECK(to_double(ARGUMENTS(5), &second))
    int64_t seconds = floor(second);
    int32_t nanoseconds = 1000000000*(second-seconds);
    if (
      year < 1970 ||
      month < 1 || month > 12 ||
      day < 1 ||
      hour < 0 || hour > 23 ||
      minute < 0 || minute > 59 ||
      seconds < 0 || seconds > 59
    ) RETURN_UNDEFINED
    int64_t days = 0;
    year -= 1970;
    if (year >= 2) {
      days += 730;
      year -= 2;
      days += 1461*(year/4);
      year %= 4;
      days += 365*year;
      if (year > 0) ++days;
    } else {
      if (year == 1971) days += 365;
      year += 2;
    }
    int m;
    for (m = 1; m <= 12; ++m) {
      int d;
      switch (m) {
	case 2:
	  d = year == 0 ? 29 : 28;
	  break;
	case 4: case 6: case 9: case 11:
	  d = 30;
	  break;
	default:
	  d = 31;
      }
      if (month > m) days += d;
      if (month == m && day > d) RETURN_UNDEFINED
    }
    days += day-1;
    seconds += 86400*(uint64_t)days+3600*hour+60*minute;
    RETURN_SINGLE_RESULT(
      CREATE(std_types::date_and_time, seconds, nanoseconds))
  }

# ATTENTION: These algorithms break on January 1st, 2100!

CODE
  static void year_month_day
    (
      NODE *node,
      int *year_p,
      int *month_p,
      int *day_p
    )
    {
      long days;
      int year, month, day, quads;
      int is_a_leap_year;
      days = node->date_and_time.seconds/86400;
      is_a_leap_year = false;
      if (days < 730) { // 1970, 1971
	year = days/365;
	days -= 365*year;
	year += 1970;
      } else { // 1972 and later
	days -= 730;
	quads = days/1461;
	days -= 1461*quads;
	year = 1972+4*quads;
	if (days >= 1096) {
	  year += 3;
	  days -= 1096;
	} else if (days >= 731) {
	  year += 2;
	  days -= 731;
	} else if (days >= 366) {
	  ++year;
	  days -= 366;
	} else {
	  is_a_leap_year = true;
	}
      }
      month = 1;
      if (days < 31) goto done; // January
      days -= 31;
      ++month;
      if (is_a_leap_year) {
	if (days < 29) goto done; // February
	days -= 29;
      } else {
	if (days < 28) goto done; // February
	days -= 28;
      }
      ++month;
      if (days < 31) goto done; // March
      days -= 31;
      ++month;
      if (days < 30) goto done; // April
      days -= 30;
      ++month;
      if (days < 31) goto done; // May
      days -= 31;
      ++month;
      if (days < 30) goto done; // June
      days -= 30;
      ++month;
      if (days < 31) goto done; // July
      days -= 31;
      ++month;
      if (days < 31) goto done; // August
      days -= 31;
      ++month;
      if (days < 30) goto done; // September
      days -= 30;
      ++month;
      if (days < 31) goto done; // October
      days -= 31;
      ++month;
      if (days < 30) goto done; // November
      days -= 30;
      ++month; // December
      done:
      if (year_p) *year_p = year;
      if (month_p) *month_p = month;
      if (day_p) *day_p = days+1;
    }

METHOD std_types::date_and_time/year_of
  #
    returns the calendar year

    Topic: Date and Time

    See also: month_of, day_of, day_of_week_of, hour_of, minute_of,
	      second_of, time_shift_of

  {
    CHECK_ARGUMENTS(1)
    int year;
    year_month_day(ARGUMENTS(0), &year, NULL, NULL);
    RETURN_SINGLE_RESULT(from_int(year))
  }

METHOD std_types::date_and_time/month_of
  #
    returns the month of the year

    Topic: Date and Time

    See also: year_of, day_of, day_of_week_of, hour_of, minute_of,
	      second_of, time_shift_of
  {
    CHECK_ARGUMENTS(1)
    int month;
    year_month_day(ARGUMENTS(0), NULL, &month, NULL);
    RETURN_SINGLE_RESULT(from_int(month))
  }

METHOD std_types::date_and_time/day_of
  #
    returns the day of the month

    Topic: Date and Time

    See also: year_of, month_of, day_of_week_of, hour_of, minute_of,
	      second_of, time_shift_of
  {
    CHECK_ARGUMENTS(1)
    int day;
    year_month_day(ARGUMENTS(0), NULL, NULL, &day);
    RETURN_SINGLE_RESULT(from_int(day))
  }

METHOD std_types::date_and_time/day_of_week_of
  #
    returns the month of the year

    Topic: Date and Time

    See also: year_of, month_of, day_of, hour_of, minute_of,
	      second_of, time_shift_of
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(
      from_long(
	(3+ARGUMENTS(0)->date_and_time.seconds/86400)%7+1))
  }

METHOD std_types::date_and_time/hour_of
  #
    returns the hour of the day

    Topic: Date and Time

    See also: year_of, month_of, day_of, day_of_week_of, minute_of,
	      second_of, time_shift_of
  {
    CHECK_ARGUMENTS(1)
    int seconds = ARGUMENTS(0)->date_and_time.seconds%86400;
    RETURN_SINGLE_RESULT(from_int(seconds/3600))
  }

METHOD std_types::date_and_time/minute_of
  #
    returns the minute of the hour

    Topic: Date and Time

    See also: year_of, month_of, day_of, day_of_week_of, hour_of,
	      second_of, time_shift_of
  {
    CHECK_ARGUMENTS(1)
    int seconds = ARGUMENTS(0)->date_and_time.seconds%3600;
    RETURN_SINGLE_RESULT(from_int(seconds/60))
  }

METHOD std_types::date_and_time/second_of
  #
    returns the second of the minute

    Topic: Date and Time

    See also: year_of, month_of, day_of, day_of_week_of, hour_of,
	      minute_of, time_shift_of
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(
      from_double(
	ARGUMENTS(0)->date_and_time.seconds%60+
	ARGUMENTS(0)->date_and_time.nanoseconds/1000000000.0))
  }

METHOD std_types::date_and_time/time_shift_of
  #
    returns the time shift of a date-and-time object

    Parameter:
      self # the date-and-time object

    Result:
      time_shift # the time shift of the date-and-time object in seconds

    Topic: Date and Time

    See also: year_of, month_of, day_of, day_of_week_of, hour_of, minute_of,
	      second_of

    Example:

      current_time! $t
      println! t
      println! time_shift_of(t)

    Output:

      2024-01-14 9:46:17.388 GMT+1
      3600
  {
    CHECK_ARGUMENTS(1)
    // This insane looking sequence of calls correctly computes the time shift!!!
    struct tm tm;
    time_t t1 = ARGUMENTS(0)->date_and_time.seconds;
    localtime_r(&t1, &tm);
    int isdst = tm.tm_isdst;
    gmtime_r(&t1, &tm);
    tm.tm_isdst = isdst;
    time_t t2 = mktime(&tm);
    RETURN_SINGLE_RESULT(from_uint64(t1-t2))
  }

METHOD std_types::date_and_time/seconds_since_epoch
  #
    returns the number of seconds since the epoch

    Parameter:
      self # the date-and-time object

    Result:
      seconds_since_epoch # the number of seconds since the epoch

    The UNIX epoch is the moment of 1 January 1970, 00:00:00 UTC.

    The returned value is an integer.

    Topic: Date and Time

    See also: year_of, month_of, day_of, day_of_week_of, hour_of, minute_of,
	      second_of, time_shift_of

    Example:

      current_time! $t
      println! t
      println! seconds_since_epoch(t)

    Output:

      2024-03-30 0:14:29.361 GMT+1
      1711754069
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(from_uint64(ARGUMENTS(0)->date_and_time.seconds))
  }


METHOD std_types::date_and_time/plus
  #
    adds an arbitrary time delta to a date-and-time object

    Parameters:
      self # the date-and-time object
      seconds # the number of seconds to add

    Result:
      date_and_time # the date-and-time object with the seconds added

    Topic: Date and Time

    See also: from_unix_time, date_and_time/minus

    Example:

      current_time! $t
      println! t
      println! t+24*60*60

    Output:

      2024-01-14 9:32:08.188 GMT+1
      2024-01-15 9:32:08.188 GMT+1

    Example:

      println! from_unix_time(0x7fff'ffff)

    Output:

      2038-01-19 4:14:07.000 GMT+1
  {
    CHECK_ARGUMENTS(2)
    int64_t seconds = ARGUMENTS(0)->date_and_time.seconds;
    int32_t nanoseconds = ARGUMENTS(0)->date_and_time.nanoseconds;
    double delta;
    CHECK(to_double(ARGUMENTS(1), &delta))
    int64_t delta_seconds = round(delta);
    int32_t delta_nanoseconds = 1000000000*(delta-delta_seconds);
    seconds += delta_seconds;
    nanoseconds += delta_nanoseconds;
    if (nanoseconds >= 1000000000) {
      nanoseconds -= 1000000000;
      ++seconds;
    }
    RETURN_SINGLE_RESULT(CREATE(std_types::date_and_time, seconds, nanoseconds))
  }

METHOD std_types::date_and_time/minus
  #
    subtracts a time delta or another date-and-time object from a date-and-time
    object

    Parameters:
      self # the date-and-time object
      seconds_or_date_and_time # the number of seconds or another date-and-time
				 object

    Result:
      date_and_time_or_seconds # the date-and-time object with the seconds
				 subtracted or the time difference in seconds

    Topic: Date and Time

    See also: from_unix_time, date_and_time/plus

    Example:

      current_time! $t
      println! t
      println! t-24*60*60

    Output:

      2024-01-14 9:35:31.845 GMT+1
      2024-01-13 9:35:31.845 GMT+1

    Example:

      current_time! $t1
      $t2 date_and_time(2024 1 1 0 0 0)
      println! t1-t2

    Output:

      1705221411.28341
  {
    CHECK_ARGUMENTS(2)
    int64_t seconds = ARGUMENTS(0)->date_and_time.seconds;
    int32_t nanoseconds = ARGUMENTS(0)->date_and_time.nanoseconds;
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::date_and_time)) {
      int64_t seconds_2 = ARGUMENTS(1)->date_and_time.seconds;
      int32_t nanoseconds_2 = ARGUMENTS(1)->date_and_time.nanoseconds;
      RETURN_SINGLE_RESULT(from_double(
	seconds-seconds_2+(nanoseconds-nanoseconds_2)/1000000000.0))
    } else {
      double delta;
      CHECK(to_double(ARGUMENTS(1), &delta))
      int64_t delta_seconds = round(delta);
      int32_t delta_nanoseconds = 1000000000*(delta-delta_seconds);
      seconds -= delta_seconds;
      nanoseconds -= delta_nanoseconds;
      if (nanoseconds < 00) {
	nanoseconds += 1000000000;
	--seconds;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::date_and_time, seconds, nanoseconds))
    }
  }

METHOD std_types::date_and_time/equal
  #
    compares two date-and-time objects for equality

    Parameters:
      left # the first date-and-time object
      right # the second date-and-time object

    Result:
      success # true if the date-and-time objects are equal, false otherwise

    Topic: Date and Time

    See also: date_and_time/less, date_and_time/plus, date_and_time/minus
  {
    CHECK_ARGUMENTS(2)
    NODE *left, *right;
    left = ARGUMENTS(0);
    right = ARGUMENTS(1);
    if (TYPEOF(ARGUMENTS(1)) != TYPE(std_types::date_and_time)) RETURN_FALSE
    RETURN_BOOLEAN(
      left->date_and_time.seconds == right->date_and_time.seconds &&
      left->date_and_time.nanoseconds == right->date_and_time.nanoseconds)
  }

METHOD std_types::date_and_time/less
  #
    compares two date-and-time objects

    Parameters:
      left # the first date-and-time object
      right # the second date-and-time object

    Result:
      success # true if the first date-and-time object is earlier than the
	       second

    Topic: Date and Time

    See also: date_and_time/equal, date_and_time/plus, date_and_time/minus
  {
    CHECK_ARGUMENTS(2)
    NODE *left, *right;
    left = ARGUMENTS(0);
    right = ARGUMENTS(1);
    if (TYPEOF(ARGUMENTS(1)) != TYPE(std_types::date_and_time)) INVALID_ARGUMENTS
    RETURN_BOOLEAN(
      left->date_and_time.seconds < right->date_and_time.seconds ||
      left->date_and_time.seconds == right->date_and_time.seconds &&
      left->date_and_time.nanoseconds < right->date_and_time.nanoseconds)
  }

FUNCTION std::current_time
  #
    returns the current date and time

    Result:
      date_and_time # the current date and time

    Topic: Date and Time

    See also: from_unix_time, data_and_time

    Example:

      current_time! $t
      println! t

    Output:

      2024-01-14 9:47:43.224 GMT+1
  {
    CHECK_ARGUMENTS(0)
    CHECK_IO_ACCESS_RIGHTS
    struct timespec timespec;
    clock_gettime(CLOCK_REALTIME, &timespec);
    RETURN_SINGLE_RESULT(
      CREATE(std_types::date_and_time, timespec.tv_sec, timespec.tv_nsec))
  }
