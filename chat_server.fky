#!/usr/bin/env fkyrun

  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

<require basic/stdlib>
<require ./web/server>

<allow unused>

load! $chat "chat.html"
append "<!DOCTYPE html>@nl;" &chat

$usernames_of ()

$io std_types::io
$io.usernames_of empty_hash_table

main!

$main:
  enable_logging &io 3
  start_web_server! &io 8000
  start_reading_from &io STDIN_FILENO

  loop:
    get_events! &io $events
    handle_web_server_events &io &events
    for_each events
      : (event)
	event $type $fd $argument
	case type
	  READ:
	    if
	      fd == STDIN_FILENO:
		stop_web_server &io
		terminate!
	      :
		log_unhandled_event &io event
		next!
	  GET:
	    $uri argument
	    get_requested_resource &io fd uri
	    next!
	  UPGRADE_TO_WEBSOCKET:
	    $fields argument
	    upgrade_to_websocket &io fd fields
	    next!
	  WEBSOCKET_MESSAGE:
	    $message argument
	    handle_message &io fd message
	    next!
	  WEBSOCKET_CLOSED:
	    handle_close &io fd
	    next!
	  :
	    log_unhandled_event &io event
	    next!
      next

$get_requested_resource: (io fd uri)
  case uri
    "/":
      return_http_resource io fd uri chat
    :
      http_resource_not_found io fd uri

$handle_message: (io fd message)
 $username usernames_of(io)(fd)
 if
   username.is_undefined:
     !username message
     if
       username_exists(username):
	 log &io "
	   user with username @(username) already exists
	 send_websocket_text_message &io fd "
	   A user with the name "@(username)" already exists!
	 close_connection io fd
       :
	 log &io 2 "
	   user @(username) entered chat - @(serialize(fd))@
	 !io.usernames_of(fd) username
	 send_websocket_text_message &io fd "
	   Welcome to the chat, @(username)!
	 broadcast_websocket_text_message io fd "
	   @(username) entered the chat
   :
     broadcast_websocket_text_message io undefined "
       @(username): @(message)

$handle_close: (io fd)
  $username usernames_of(io)(fd)
  if
    username.is_undefined
    -> io
    :
      log &io 2 "
	user @(username) left chat - @(serialize(fd))@
      !io.usernames_of(fd) undefined
      broadcast_websocket_text_message io undefined "
	@(username) left the chat

$username_exists: (name)
  for_each usernames_of(io)
    : (fd username)
      if
	name == username
	-> true
	next
    -> false
