#!/usr/bin/env fkyrun

<require basic/stdlib>
<require basic/export/json>
<require basic/import/json>
<require ./ai/llama>

<using std>
<using ai>

program_parameters!
  $do_log
  list
    "log" "
      log the confidence values to <stderr>
  $log_level
  list
    VALUED_OPTION "log-level" 1 to_integer "
      specify how many details shall be logged (higher is more)
  $minimum_confidence
  list
    VALUED_OPTION "min" 15 to_number "
      the minimum confidence value
  $maximum_length
  list
    VALUED_OPTION "length" 1024 to_integer "
      the maximum number of tokens to generate
  $detailed
  list
    "detailed" "
      request a more detailed answer
  $question
  list
    MANDATORY_PARAMETER "question" "
      the question you want to ask

update_if log_level > 1 &do_log -> true

on do_log:
  eprint! "
    minimum confidence: @(minimum_confidence)
    maximum length: @(maximum_length)
    detailed: @(if(detailed (-> "true") (-> "false")))
    log level: @(log_level)
    @;

$DETAILED
  if
    detailed
    -> " detailed"
    -> ""

get_tokens! $all_tokens $BEGIN_OF_STREAM $END_OF_STREAM

$generated_tokens 0

$prompt "
  Below is an instruction that describes a task, paired with an input that @
  provides further context. Write a@(DETAILED) response that appropriately @
  completes the request.
  ### Instruction: @(question)
  ### Response:@

tokenize! $tokens prompt
put &tokens BEGIN_OF_STREAM

loop:
  $t current_time()
  evaluate! tokens $next_token $confidence_values
  inc &generated_tokens
  if
    next_token == END_OF_STREAM
    done
    :
      confidence_values(1) $best_token $best_confidence
      $best_piece all_tokens(best_token+1)
      on do_log:
	$dt 1000*(current_time()-t) # in ms
	if
	  log_level <= 1:
	    $token_string "@quot;@(quoted(best_piece))@quot;:"
	    eprintln!
	      format
		"[%4|%3.1] %l18 %3.3"
		generated_tokens dt token_string best_confidence
	  :
	    eprintln! format("-[%4|%3.1]-------------" generated_tokens dt)
	    from_to 1 10
	      : (i)
		confidence_values(i) $token $confidence
		$piece all_tokens(token+1)
		update_if any_of(piece: (chr) -> chr == '@0x142;') &piece
		  -> "<???>" # 'Å‚' cannot be printed - why?
		$token_string "@quot;@(quoted(piece))@quot;:"
		eprintln!
		  format("%l18 %3.3" token_string confidence)
		next!
	      pass
      if
	best_confidence >= minimum_confidence || generated_tokens < 5:
	  update_if generated_tokens == 1 &best_piece: trim_left best_piece
	  print! best_piece
	  push &tokens best_token
	  if
	    generated_tokens < maximum_length
	    next
	    :
	      println!
	      println!
	      println! "I think, I've told you enough ..."
	done

  $done:
    println!
    terminate!

$quoted: (text)
  $buf ""
  $s 1
  $n length_of(text)
  $i 0
  loop:
    inc &i
    if
      i > n
      -> append(buf range(text s n))
      :
	$chr text(i)
	case chr
	  '@nl;':
	    append &buf range(text s i-1)
	    append &buf "\n"
	    !s i+1
	    next
	  '@quot;', '\':
	    append &buf range(text s i-1)
	    push &buf '\'
	    push &buf chr
	    !s i+1
	    next
	  next
