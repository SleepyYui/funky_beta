#!/usr/bin/env fkyrun

<require basic/stdlib>
<require basic/export/json>
<require basic/import/json>
<require ./ai/llama>

<using std>
<using ai>

program_parameters!
  $do_log
  list
    "log" "
      log the confidence values to <stderr>
  $minimum_confidence
  list
    VALUED_OPTION "min" 15 to_number "
      the minimum confidence value
  $maximum_length
  list
    VALUED_OPTION "length" 1024 to_integer "
      the maximum number of tokens to generate
  $question
  list
    MANDATORY_PARAMETER "question" "
      the question you want to ask

on do_log:
  eprint! "
    minimum confidence: @(minimum_confidence)
    maximum length: @(maximum_length)
    @;

get_tokens! $all_tokens $_BEGIN_OF_STREAM $END_OF_STREAM

$generated_tokens 0

$prompt "
  Below is an instruction that describes a task, paired with an input that @
  provides further context. Write a response that appropriately completes the @
  request.
  ### Instruction: @(question)
  ### Response:@

tokenize! $tokens prompt
loop:
  evaluate! tokens $token $confidence_values
  inc &generated_tokens
  if
    token == END_OF_STREAM
    done
    :
      confidence_values(1) $best_token $best_confidence
      $piece (all_tokens(best_token+1))
      on do_log:
	eprintln!
	  current_time() ": "
	  pad_left(best_token 5) ' '
	  pad_right("@quot;@(quoted(piece))@quot;:" 16) best_confidence
      if
	best_confidence >= minimum_confidence || generated_tokens < 5:
	  update_if generated_tokens == 1 &piece: trim_left piece
	  print! piece
	  push &tokens best_token
	  if
	    generated_tokens < maximum_length
	    next
	    :
	      println!
	      println!
	      println! "I think, I've told you enough ..."
	done

  $done:
    println!
    terminate!

$quoted: (text)
  $buf ""
  $s 1
  $n length_of(text)
  $i 0
  loop:
    inc &i
    if
      i > n
      -> append(buf range(text s n))
      :
	$chr text(i)
	case chr
	  '@nl;':
	    append &buf range(text s i-1)
	    append &buf "\n"
	    !s i+1
	    next
	  '@quot;', '\':
	    append &buf range(text s i-1)
	    push &buf '\'
	    push &buf chr
	    !s i+1
	    next
	  next
